'''plus petit que exercice 7
def lpp(a,b):
    if a<b:
        return(a)
    else: 
        return(b)
print(lpp(1,2))'''




''' exercice 9 savoir si oui ou non il est entier
def  est_entier (x):
    if x==(int):
        return True
    else:
        return False
print (est_entier(2.5))'''



def est_pair(n):
    if n%2==0:
        return True
    else:
        return False
print(est_pair(2))




def carre(n):
    carre = []
    for k in range(1  ,n+1):
        carre.append(k**2)
    return carre
print(carre(5))



def carre_compr(n):
    l = [k*2 for k in range(1,n+1)]
    return l 
print(carre_compr(100))



liste_1=[x for x in range (1,20,2)]
print(liste_1) 
liste_2=[x**2 for x in range(11)]
print(liste_2)
liste_3=[2**x for x in range(11)]
print(liste_3)    
liste_4=[x for x in range(3,52) if x%3==0] 
print(liste_4)
'''def rep(c, n):
    if n>0:
       return c*n
   
print(rep('c',5))'''

'''def fonction(c,d,n,m):
   if n >0 and m> 0:
        return c* n+ d* m
print(fonction('n','m',8,9))'''

'''def inverser_chaine(chaine):
    chaine_inverse = ""
    for caractere in chaine:
        chaine_inverse = caractere + chaine_inverse
    return chaine_inverse
chaine ="Mhedi"
print(inverser_chaine(chaine))'''

'''def triple_six(ch):
     return "666" in ch
print(triple_six("aaa66s"))'''
'''def affiche2():
  for j in [0, 1, 2, 3]:
      print(j)

affiche2()'''

'''def triple_six_exact(ch):
   n=len(ch)
   if ch[0:3]=="666" and (n<=3 or ch[3]!="6"):
      return True
   if ch[n-3:n] =="666" and ch[n-3]  != '6':
      return True

def mirroir(ch):
 inv = ''
 for e in ch:
     inv = e+ inv
 return inv
    
def palindrome(ch):
    return ch == ch[::-1]
print(palindrome('Younes'))
   for k in range (1,n-3):
    if ch[k:k+3]=="666" and ch[k-1] != 6 and ch[k+3] !=6:
      return True
    return False

print(triple_six_exact('666'))'''

'''l= []
for k in range (1,100):
     l+= [k]
print(l)'''

l= []
for k in range (1,100):
    l.append(k)
    print(l)
l=[]
l= 100*[0]
for k in range (1,100):
    l[k] = k+1
print(l)
l=[]
for k in range (1,101):
    l = l+ [k*2]
print(l)
l=[]
for k in range (1,101):
    l = l+ [k**2]
print(l)

def carre(n):
    carre =[]
    for k in range (1,n+1):
        carre.append(k**2)
    return carre
print(carre(5))


    for i, num in enumerate(L):
def tous_positifs(L):
    for nombre in L:
      if nombre<0:
        return False
    return True
L=[0,1,2,3,-4]
print(tous_positifs(L))    
    
def positif(L):
    count =0
    for k in L:
        if k>= 0:
            count +1
    return count

print(positif([2,-1,3,4,-6,2,6]))
        if num < 0:
            indices.append(i)
    return indices




